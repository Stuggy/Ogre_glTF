#pragma once

#include <memory>
#include <Ogre.h>

#include "Ogre_glTF_DLL.hpp"

namespace Ogre_glTF
{

	//Forward declare main class
	class fileLoader;

	///Class that hold the loaded content of a glTF file and that can create Ogre objects from it
	class Ogre_glTF_EXPORT loaderAdapter
	{
		friend class fileLoader;

		///Private constructor. fileLoader act as a factory for theses object.
		///This will aslo initialize the "pimpl" structure
		loaderAdapter();

		///opaque content of the class
		struct impl;

		///pointer to implementation
		std::unique_ptr<loaderAdapter::impl> pimpl;

	public:
		///This clear the pimpl structure
		~loaderAdapter();

		///Deleted copy constructor : non copyable class
		loaderAdapter(const loaderAdapter&) = delete;

		///Deleted asignment constructor : non copyable class
		loaderAdapter& operator=(const loaderAdapter&) = delete;

		///Construct an item for this object
		/// \param smgr pointer to the scene manager where we are creating the item
		Ogre::Item* getItem(Ogre::SceneManager* smgr) const;

		///Move constructor : object is movable
		/// \param other object to move
		loaderAdapter(loaderAdapter&& other) noexcept;

		///Move assignemnt operator
		loaderAdapter& operator=(loaderAdapter&& other) noexcept;

		///Return the current state of the adapter
		bool isOk() const;

		///Return the last error generated by the underlying glTF loading library
		std::string getLastError() const;
	};

	///Class that is responsible for initializing the library with the loader, and giving out
	class Ogre_glTF_EXPORT fileLoader
	{
		///object that acutally communicate with the underlying glTF loading library
		struct gltfLoader;

		///Opaque pointer that handle the underlying glTF loading library (pimpl)
		std::unique_ptr<fileLoader::gltfLoader> loaderImpl;

	public:
		///Initialize the library by creating this object.
		fileLoader();

		///Move constructor
		/// \param other object to move
		fileLoader(fileLoader&& other) noexcept;

		///Deinitialize the library at this object destruction
		~fileLoader();

		///Load a glTF text or binary file. Give you an adapter to use this file with Ogre
		/// \param path String containing the path to a file to load (either .glTF or .glc)
		loaderAdapter loadFile(const std::string& path) const;

		///Deleted copy contructor
		fileLoader(const fileLoader&) = delete;

		///Deleted asignment operator
		fileLoader& operator=(const fileLoader&) = delete;
	};
}